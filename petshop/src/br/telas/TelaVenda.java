/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.telas;

import br.cliente.Cliente;
import br.cliente.ClienteDAO;
import br.contasreceber.ContasReceber;
import br.contasreceber.ContasReceberDAO;
import br.livro.LivroCaixa;
import br.livro.LivroCaixaDAO;
import br.orcamento.ItemOrcamento;
import br.orcamento.ItemOrcamentoDAO;
import br.orcamento.Orcamento;
import br.orcamento.OrcamentoDAO;
import br.produto.Estoque;
import br.produto.EstoqueDAO;
import br.produto.ProdutoTableModel;
import br.produto.Produto;
import br.produto.ProdutoDAO;
import br.util.FormataTamanhoColunasJTable;
import br.util.UsuarioAtivo;
import br.util.Util;
import br.venda.ItemVenda;
import br.venda.ItemVendaCellRenderer;
import br.venda.ItemVendaDAO;
import br.venda.ItemVendaTableModel;
import br.venda.Venda;
import br.venda.VendaDAO;
import br.vendedor.Vendedor;
import br.vendedor.VendedorDAO;
import com.lowagie.text.pdf.AcroFields;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Pedro Saraiva
 */
public class TelaVenda extends javax.swing.JDialog {

    private List<ItemVenda> itensVenda;
    private Produto produto;
    private Venda venda = new Venda();
    private Orcamento orcamento;

    /**
     * Creates new form TelaVenda
     */
    public TelaVenda() {
        initComponents();
        setTitle("Venda");
        setLocationRelativeTo(null);
        setModal(true);
        preencheCliente();
        preencheVendedor();
        SimpleDateFormat dfdtData;
        dfdtData = new SimpleDateFormat("dd/MM/yyyy");
        lblData.setText(dfdtData.format(new Date()));
        preencheTabela();
        lblDebito.setVisible(false);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

    }

    private boolean podeFechar = false;

    public TelaVenda(Venda v) {
        initComponents();
        setTitle("Venda");
        setLocationRelativeTo(null);
        setModal(true);
        preencheCliente();
        preencheVendedor();
        cbCliente.setSelectedItem(v.getCliente());
        cbVendedor.setSelectedItem(v.getVendedor());
        SimpleDateFormat dfdtData;
        dfdtData = new SimpleDateFormat("dd/MM/yyyy");
        lblData.setText(dfdtData.format(v.getData()));
        preencheTabela();
        lblDebito.setVisible(false);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        if (v.getTipoPagamento().equals("VV")) {
            cbTipoPagamento.setSelectedIndex(1);
        } else if (v.getTipoPagamento().equals("VP")) {
            cbTipoPagamento.setSelectedIndex(2);
        }
        if (v.getTipoPagamento().equals("VC")) {
            cbTipoPagamento.setSelectedIndex(3);
        }

        ItemVendaDAO ivDAO = new ItemVendaDAO();
        itensVenda = ivDAO.checkExists("venda", v);

        preencheTabela();
        cbCliente.setEnabled(false);
        cbTipoPagamento.setEnabled(false);
        cbVendedor.setEnabled(false);
        jButton3.setEnabled(false);
        jButton2.setEnabled(false);
        jButton1.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        tfQuantidade.setEnabled(false);
        tb.setEnabled(false);
        jMenu1.setVisible(false);

        podeFechar = true;
    }

    public void preencheVendedor() {
        cbVendedor.removeAllItems();
        cbVendedor.addItem("--");
        VendedorDAO vDAO = new VendedorDAO();
        List<Vendedor> lista = vDAO.checkExists("ativo", true);
        Collections.sort(lista);
        for (Vendedor v : lista) {
            cbVendedor.addItem(v);
        }
    }

    public void preencheCliente() {
        cbCliente.removeAllItems();
        cbCliente.addItem("--");
        ClienteDAO cDAO = new ClienteDAO();
        List<Cliente> lista = cDAO.checkExists("ativo", true);
        Collections.sort(lista);
        for (Cliente c : lista) {
            cbCliente.addItem(c);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel4 = new javax.swing.JPanel();
        lbTexto = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbTipoPagamento = new javax.swing.JComboBox();
        cbVendedor = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cbCliente = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        lblData = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblDescricaoProduto = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfQuantidade = new javax.swing.JFormattedTextField();
        jButton2 = new javax.swing.JButton();
        lblParcial = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblTotalFinal = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblDesconto1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        lblDebito = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(0, 153, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbTexto.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        lbTexto.setText("Vendas");
        jPanel4.add(lbTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 330, 40));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 40));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tb.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tb);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 182, 659, 201));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel2.setText("Tipo Pagamento.: *");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 16, -1, -1));

        cbTipoPagamento.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cbTipoPagamento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--", "Venda à Vista", "Venda à Prazo", "Venda à Cartão" }));
        cbTipoPagamento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbTipoPagamentoFocusLost(evt);
            }
        });
        jPanel2.add(cbTipoPagamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 13, 182, -1));

        cbVendedor.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cbVendedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--", "Venda à Vista", "Venda à Prazo", "Venda à Cartão" }));
        jPanel2.add(cbVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 41, 182, -1));

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setText("Vendedor.: *");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 44, -1, -1));

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel1.setText("Cliente.: *");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 72, -1, -1));

        cbCliente.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cbCliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--" }));
        cbCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbClienteFocusLost(evt);
            }
        });
        jPanel2.add(cbCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 69, 386, -1));

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel4.setText("Data.: *");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 16, -1, -1));

        lblData.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblData.setText("Data.: *");
        jPanel2.add(lblData, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 16, 125, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 660, 100));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/imagens/codbarras.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 121, -1, 55));

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel5.setText("Quantidade.: *");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, -1, 20));

        lblDescricaoProduto.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblDescricaoProduto.setText(" ");
        jPanel1.add(lblDescricaoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 260, 20));

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel6.setText("Descrição.: *");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 121, -1, 20));

        tfQuantidade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        tfQuantidade.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tfQuantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfQuantidadeKeyPressed(evt);
            }
        });
        jPanel1.add(tfQuantidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 150, 90, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/imagens/add.png"))); // NOI18N
        jButton2.setToolTipText("Adicionar Produto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 140, 50, 40));

        lblParcial.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblParcial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(lblParcial, new org.netbeans.lib.awtextra.AbsoluteConstraints(581, 390, 90, 20));

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel8.setText("Total:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 430, -1, 20));

        lblTotalFinal.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblTotalFinal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(lblTotalFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 430, 90, 20));

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel9.setText("Desc.:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 410, -1, 20));

        lblDesconto1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblDesconto1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(lblDesconto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 410, 90, 20));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/imagens/delete (1).png"))); // NOI18N
        jButton3.setToolTipText("Cancelar Produto");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 140, 50, 40));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/imagens/money.png"))); // NOI18N
        jButton4.setToolTipText("Finalizar Venda");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 480, 50, 40));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/imagens/delete.png"))); // NOI18N
        jButton5.setToolTipText("Cancelar Venda");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 50, 40));

        lblDebito.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblDebito.setForeground(new java.awt.Color(255, 0, 0));
        lblDebito.setText("O Cliente Possui Débitos em atraso!");
        lblDebito.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblDebito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDebitoMouseClicked(evt);
            }
        });
        jPanel1.add(lblDebito, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 690, 530));

        jMenu1.setMnemonic('o');
        jMenu1.setText("Opções");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem1.setMnemonic('c');
        jMenuItem1.setText("Cadastro de Cliente");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem3.setMnemonic('i');
        jMenuItem3.setText("Importar Orçamento");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem4.setText("Novo Orçamento");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void preencheVenda() {
        if (venda == null) {
            venda = new Venda();
        }
        if (cbTipoPagamento.getSelectedIndex() > 0) {
            venda.setTipoPagamento(tipoPagamento());
        }
        if (cbCliente.getSelectedIndex() > 0) {
            venda.setCliente((Cliente) cbCliente.getSelectedItem());
        }
        if (cbVendedor.getSelectedIndex() > 0) {
            venda.setVendedor((Vendedor) cbVendedor.getSelectedItem());
        }
        venda.setCancelada(false);
        venda.setUsuario(UsuarioAtivo.getUsuario());

    }

    private String tipoPagamento() {
        switch (cbTipoPagamento.getSelectedIndex()) {
            case 1:
//                venda.setTipoPagamento("VV");
                if (!Util.verificaPermissao("REALIZAR_VV", 1)) {
                    cbTipoPagamento.setSelectedIndex(0);
                    cbTipoPagamento.requestFocus();
                }
                return "VV";
            case 2:
//                venda.setTipoPagamento("VP");
                if (!Util.verificaPermissao("REALIZAR_VP", 1)) {
                    cbTipoPagamento.setSelectedIndex(0);
                    cbTipoPagamento.requestFocus();
                }
                return "VP";
            case 3:
//                venda.setTipoPagamento("VC");
                if (!Util.verificaPermissao("REALIZAR_VC", 1)) {
                    cbTipoPagamento.setSelectedIndex(0);
                    cbTipoPagamento.requestFocus();
                }
                return "VC";
        }
        return "";
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (cbTipoPagamento.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Informe o Tipo de Pagamento!");
            cbTipoPagamento.requestFocus();
            return;
        }
        if (cbVendedor.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Informe o Vendedor!");
            cbVendedor.requestFocus();
            return;
        }
        if (cbCliente.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Informe o Cliente!");
            cbCliente.requestFocus();
            return;
        }
        preencheVenda();

        ProdutoDAO pDAO = new ProdutoDAO();
        ProdutoTableModel ptm = new ProdutoTableModel(pDAO.list());
        Object o = TelaPesquisa.exibeTela(ptm, "Produto");
        if (o != null) {
            tfQuantidade.setText("1");
            produto = pDAO.checkExists("id", Integer.valueOf(String.valueOf(o))).get(0);
            lblDescricaoProduto.setText(produto.getDescricao());
            tfQuantidade.requestFocus();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (itensVenda == null) {
            itensVenda = new ArrayList<ItemVenda>();
        }
        if (produto == null) {
            jButton1ActionPerformed(evt);
            return;
        } else {
            if (tfQuantidade.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Informe a quantidade!");
                tfQuantidade.requestFocus();
                return;
            } else {
                ItemVenda it = new ItemVenda();
                it.setQuantidade(Double.parseDouble(tfQuantidade.getText().replace(",", ".")));
                it.setProduto(produto);
                it.setVenda(venda);
                if (it.getQuantidade() > it.getProduto().getQtdEstoque() && !it.getProduto().isServico()) {
                    JOptionPane.showMessageDialog(rootPane, "Quantidade Insuficiente!");
                    tfQuantidade.requestFocus();
                    return;
                }
                if (it.getQuantidade() == 0) {
                    JOptionPane.showMessageDialog(rootPane, "Quantidade não pode ser 0!");
                    tfQuantidade.requestFocus();
                    return;
                }
                if (verificaProdutoAdicionado()) {

                    return;
                }
                it.setOrdem(itensVenda.size() + 1);
                adicionaEstoque("SAÍDA EM VENDA", 0, it.getQuantidade(), produto);
                modificaQtdProduto(produto.getQtdEstoque() - it.getQuantidade());
                itensVenda.add(it);
                produto = null;
                lblDescricaoProduto.setText("");
                tfQuantidade.setText("");

            }

        }
        preencheTabela();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void modificaQtdProduto(double qtd) {
        if (!produto.isServico()) {
            produto.setQtdEstoque(qtd);
            ProdutoDAO pDAO = new ProdutoDAO();
            pDAO.update(produto);
        }
    }

    private boolean verificaProdutoAdicionado() {
        for (int i = 0; i < itensVenda.size(); i++) {
            if (itensVenda.get(i).getProduto().equals(produto) && !itensVenda.get(i).isCancelado()) {
                if (JOptionPane.showConfirmDialog(rootPane, "Produto Já Adicionado, Deseja Aumentar a Quantidade?",
                        "Produto Encontrado", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE)
                        == JOptionPane.YES_OPTION) {
                    double qtd = itensVenda.get(i).getQuantidade();
                    double nvQtd = Double.parseDouble(tfQuantidade.getText().replace(",", "."));
                    itensVenda.get(i).setQuantidade(qtd + nvQtd);
                    adicionaEstoque("SAÍDA EM VENDA", 0, nvQtd, produto);
                    modificaQtdProduto(produto.getQtdEstoque() - nvQtd);
                    produto = null;
                    lblDescricaoProduto.setText("");
                    preencheTabela();
                }
                return true;
            }
        }
        return false;
    }

    private void tfQuantidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfQuantidadeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButton2ActionPerformed(null);
        }
    }//GEN-LAST:event_tfQuantidadeKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (Util.verificaPermissao("CANCEL_ITEM_VENDA", 1)) {
            if (itensVenda.size() == 0) {
                JOptionPane.showMessageDialog(rootPane, "Não existe ítens!");
            } else {
                Integer ordem = 0;
                try {
                    ordem = Integer.parseInt(JOptionPane.showInputDialog("Informe a Ordem Que deseja Cancelar: "));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Erro!");
                    return;
                }
                if (ordem > 0) {
                    for (int i = 0; i < itensVenda.size(); i++) {
                        if (itensVenda.get(i).getOrdem().equals(ordem)) {
                            ProdutoDAO pDAO = new ProdutoDAO();
                            Produto p1 = pDAO.checkExists("id", itensVenda.get(i).getProduto().getId()).get(0);
                            if (!p1.isServico()) {

                                p1.setQtdEstoque(p1.getQtdEstoque() + itensVenda.get(i).getQuantidade());

//                            ProdutoDAO pDAO = new ProdutoDAO();
                                pDAO.update(p1);
                                adicionaEstoque("CANCELAMENTO DE VENDA", itensVenda.get(i).getQuantidade(), 0, p1);
                            }
                            itensVenda.get(i).setCancelado(true);
                            break;
                        }
                    }
                }
                preencheTabela();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (valorTotal() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Venda está com valor 0!");
            return;
        }
        preencheTabela();

        if (itensVenda.size() > 0) {
            venda.setValorTotal(valorTotal());
            venda.setDesconto(Double.parseDouble(lblDesconto1.getText().replace(",", ".")));
            venda.setData(new Date());
            venda = TelaFechaVenda.exibeFechamento(venda);
            if (venda.getHora() != null) {

                VendaDAO vDAO = new VendaDAO();
                vDAO.add(venda);
                if (venda.getVlVista() > 0) {
                    LivroCaixa lc = new LivroCaixa();
                    lc.setValorEntrada(venda.getVlVista());
                    lc.setDescricao("VENDA Nº " + Util.decimalFormat().format(venda.getId()) + ", DO CLIENTE " + venda.getCliente().getNome());
                    lc.setData(new Date());
                    lc.setVenda(venda);

                    LivroCaixaDAO lcDAO = new LivroCaixaDAO();
                    lcDAO.add(lc);
                }
                if (venda.getVlPromissoria() > 0) {
                    TelaFechaVendaPromissoria.chamaTela(venda);
                }
                if (venda.getVlCartao() > 0) {
                    TelaFechaVendaCartao tfvc = new TelaFechaVendaCartao(venda);
                    tfvc.setVisible(true);
                }

                for (ItemVenda itensVenda1 : itensVenda) {
                    ItemVendaDAO ivDAO = new ItemVendaDAO();
                    itensVenda1.setVenda(venda);
                    ivDAO.add(itensVenda1);
                }

                limpaCampos();
                preencheTabela();
                JOptionPane.showMessageDialog(rootPane, "Venda Realizada Com Sucesso!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Informe os ítens da venda!");
        }
        limpaCampos();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void limpaCampos() {
        tfQuantidade.setText("");
        lblDebito.setVisible(false);
        venda = new Venda();
        cbCliente.setSelectedIndex(0);
        cbVendedor.setSelectedIndex(0);
        cbTipoPagamento.setSelectedIndex(0);
        itensVenda = new ArrayList<ItemVenda>();
    }

    private void cbTipoPagamentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbTipoPagamentoFocusLost
        // TODO add your handling code here:
        preencheTabela();
    }//GEN-LAST:event_cbTipoPagamentoFocusLost

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (Util.verificaPermissao("CANCEL_VENDA", 1)) {
            if (JOptionPane.showConfirmDialog(rootPane, "Deseja cancelar a venda?", "Cancelar", JOptionPane.YES_NO_OPTION)
                    == JOptionPane.YES_OPTION) {
                cancelarVenda();
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (!podeFechar) {
            if (itensVenda.size() > 0) {
                JOptionPane.showMessageDialog(rootPane, "Cancele a Venda!");
                repaint();
            } else {
                cancelarVenda();
            }
        } else{
            dispose();
        }

    }//GEN-LAST:event_formWindowClosing

    private void cbClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbClienteFocusLost
        ContasReceberDAO crDAO = new ContasReceberDAO();
        if (cbCliente.getSelectedIndex() > 0) {
            if (crDAO.listaContasClienteEmAtraso((Cliente) cbCliente.getSelectedItem()).size() > 0) {
                if (!Util.verificaPermissao("PERMITIR_QUE_CLIENTES_EM_ATRASO_COMPREM", 0)) {
                    JOptionPane.showMessageDialog(rootPane, "O Cliente está em atraso!\n"
                            + "Você não possui permissão para vendê-lo.");
                    cbCliente.requestFocus();
                }
                lblDebito.setVisible(true);
            } else {
                lblDebito.setVisible(false);
            }

        } else {
            lblDebito.setVisible(false);
        }
    }//GEN-LAST:event_cbClienteFocusLost

    private void lblDebitoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDebitoMouseClicked
        TelaContaPromissoria.chamaTela((Cliente) cbCliente.getSelectedItem());
        cbClienteFocusLost(null);
    }//GEN-LAST:event_lblDebitoMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (Util.verificaPermissao("CE_CLIENTE", 1)) {
            TelaCliente tc = new TelaCliente();
            tc.setVisible(true);
            preencheCliente();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        orcamento = TelaListarOrcamento.chamatTela();
        if (orcamento != null) {
            if (itensVenda.size() > 0) {
                JOptionPane.showMessageDialog(rootPane, "Finalize a venda atual antes de importar o Orçamento!");
                return;
            }
            if (JOptionPane.showConfirmDialog(rootPane, "Deseja importar o orçamento nº "
                    + Util.decimalFormat(6).format(orcamento.getId()) + "?", "Importação",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                importarOrcamento(orcamento);
                cbClienteFocusLost(null);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void importarOrcamento(Orcamento o) {
        limpaCampos();
        switch (o.getTipoPagamento()) {
            case "VV":
                cbTipoPagamento.setSelectedIndex(1);
                break;
            case "VP":
                cbTipoPagamento.setSelectedIndex(2);
                break;
            case "VC":
                cbTipoPagamento.setSelectedIndex(3);
        }

        cbCliente.setSelectedItem(o.getCliente());
        cbVendedor.setSelectedItem(o.getVendedor());

        preencheVenda();
        ItemOrcamentoDAO iODAO = new ItemOrcamentoDAO();
        List<ItemOrcamento> lista = iODAO.checkExists("orcamento", o);
        for (ItemOrcamento io : lista) {
            ItemVenda iv = new ItemVenda();
            produto = io.getProduto();
            iv.setCancelado(false);
            iv.setOrdem(io.getOrdem());
            iv.setProduto(produto);
            iv.setQuantidade(io.getQuantidade());
            iv.setVenda(venda);
            if (iv.getQuantidade() > iv.getProduto().getQtdEstoque() && !iv.getProduto().isServico()) {
                JOptionPane.showMessageDialog(rootPane, "Não foi possível importar o produto: "
                        + "\n" + iv.getProduto().getDescricao() + ", quantidade insuficiente!");
                tfQuantidade.requestFocus();

            } else {
                adicionaEstoque("SAÍDA EM VENDA", 0, iv.getQuantidade(), produto);
                modificaQtdProduto(produto.getQtdEstoque() - iv.getQuantidade());
                itensVenda.add(iv);
            }
        }
        preencheTabela();

        o.setImportado(true);
        OrcamentoDAO oDAO = new OrcamentoDAO();
        oDAO.update(o);

    }

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (Util.verificaPermissao("INSERIR_ORCAMENTO", 1)) {
            TelaOrcamento to = new TelaOrcamento();
            to.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
//        JOptionPane.showMessageDialog(rootPane, "87");
    }//GEN-LAST:event_formKeyPressed

    private void cancelarVenda() {
        if (itensVenda.size() > 0) {
            VendaDAO vDAO = new VendaDAO();
            ItemVendaDAO ivDAO = new ItemVendaDAO();
            ProdutoDAO pDAO = new ProdutoDAO();
            venda.setCancelada(true);
            venda.setData(new Date());
            venda.setHora(new Date());
            venda.setValorTotal(valorTotal());
            venda.setDesconto(Double.parseDouble(lblDesconto1.getText().replace(",", ".")));
            vDAO.add(venda);
            for (ItemVenda itensVenda1 : itensVenda) {
                if (!itensVenda1.isCancelado()) {
                    Produto p1 = pDAO.checkExists("id", itensVenda1.getProduto().getId()).get(0);
                    p1.setQtdEstoque(p1.getQtdEstoque() + itensVenda1.getQuantidade());
                    pDAO.update(p1);
                    adicionaEstoque("CANCELAMENTO DE VENDA", itensVenda1.getQuantidade(), 0, p1);
                }
                itensVenda1.setCancelado(true);
                itensVenda1.setVenda(venda);
                ivDAO.add(itensVenda1);
            }

            itensVenda = new ArrayList<ItemVenda>();
            venda = new Venda();
            preencheTabela();
            cbCliente.setSelectedIndex(0);
            cbTipoPagamento.setSelectedIndex(0);
            cbVendedor.setSelectedIndex(0);
            tfQuantidade.setText("");

        } else {
            setVisible(false);
        }
    }

    private double valorTotal() {
        double parcial = 0, total = 0, desconto = 0;
        for (ItemVenda itensVenda1 : itensVenda) {
            if (!itensVenda1.isCancelado()) {
                parcial += itensVenda1.getParcial();
                desconto += itensVenda1.getDesconto();
            }
        }
        total = parcial - desconto;
        lblParcial.setText(String.format("%.2f", parcial));
        lblDesconto1.setText(String.format("%.2f", desconto));
        lblTotalFinal.setText(String.format("%.2f", total));
        return parcial;
    }

    private void preencheTabela() {
        if (itensVenda == null) {
            itensVenda = new ArrayList<>();
        }
        preencheVenda();
//        Collections.sort(itensVenda);
        ItemVendaTableModel iv = new ItemVendaTableModel(itensVenda);
        tb.setModel(iv);
        tb.setDefaultRenderer(Object.class, new ItemVendaCellRenderer());
        valorTotal();
        FormataTamanhoColunasJTable.packColumns(tb, 1);
//        tb.setAutoCreateRowSorter(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaVenda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbCliente;
    private javax.swing.JComboBox cbTipoPagamento;
    private javax.swing.JComboBox cbVendedor;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lbTexto;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDebito;
    private javax.swing.JLabel lblDesconto1;
    private javax.swing.JLabel lblDescricaoProduto;
    private javax.swing.JLabel lblParcial;
    private javax.swing.JLabel lblTotalFinal;
    private javax.swing.JTable tb;
    private javax.swing.JFormattedTextField tfQuantidade;
    // End of variables declaration//GEN-END:variables

    private void adicionaEstoque(String desc, double qtdEntrada, double qtdSaida, Produto produto) {
        Estoque e = new Estoque();
        EstoqueDAO eDAO = new EstoqueDAO();

        e.setData(new Date());
        e.setHora(new Date());
        e.setDescricao(desc);
        e.setProduto(produto);
        e.setQtdEntrada(qtdEntrada);
        e.setQtdSaida(qtdSaida);

        eDAO.add(e);
    }

}
